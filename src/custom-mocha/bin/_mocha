'use strict';
const fs = require("fs")
const execSync = require('child_process').execSync;

let srcDir = undefined
let tscOutDir = undefined
let preRun = undefined
let tsArgCount = 0

const originalArgv = [].concat(process.argv.slice(2))
const argvForMocha = []

originalArgv.forEach((originalArg) => {
  if (originalArg.startsWith("--tscOutDir=")) {
    tscOutDir = originalArg.replace("--tscOutDir=", "")
  } else if (originalArg.startsWith("--preRun=")) {
    preRun = originalArg.replace("--preRun=", "")
  } else if (originalArg.startsWith("--srcDir=")) {
    srcDir = originalArg.replace("--srcDir=", "")
  } else {
    argvForMocha.push(originalArg)

    if (originalArg.endsWith(".ts")) {
      tsArgCount += 1
    }
  }
})

if (tsArgCount != 1 || !argvForMocha[argvForMocha.length - 1].endsWith(".ts")) {
  throw `Expected to receive exactly one typescript file or wildcard argument, " + 
  "and for that argument to be the final argument provided: '${argvForMocha}'`
}

if (!fs.existsSync(srcDir)) {
  throw `Expected srcDir to exist: '${srcDir}'`
}

if (!fs.existsSync(tscOutDir)) {
  throw `Expected tscOutDir to exist: '${tscOutDir}'`
}

let tsTestsToRun = argvForMocha[argvForMocha.length - 1]

// 1a) strip off working directory
tsTestsToRun = tsTestsToRun.replace(process.cwd() + "/", "");

// 1b) change src dir to tscOutDir
tsTestsToRun = tsTestsToRun.replace(srcDir, tscOutDir);

// 1c) change .ts to .js
tsTestsToRun = tsTestsToRun.replace(new RegExp('\.ts$'), ".js");

argvForMocha[argvForMocha.length - 1] = tsTestsToRun

// 2) If specified, run the "preRun" file. This is a kind of workaround to force
// execution of tsc when running mocha via the intellij runner

if (preRun) {
  if (!fs.existsSync(preRun)) {
    throw `Expected preRun file to exist: '${preRun}'`
  }
  execSync(preRun)
}


// 3) Use tsconfig-paths to make it so ts path aliasing works for finding
// the equivalent js files via node

const tsConfig = require("../../tsconfig-base.json")
const tsConfigPaths = require("tsconfig-paths")

const baseUrl = tscOutDir; // Either absolute or relative path. If relative it's resolved to current working directory.
const cleanup = tsConfigPaths.register({
  baseUrl,
  paths: tsConfig.compilerOptions.paths
})

// 4) invoke mocha cli

require('source-map-support').install()
require('mocha/lib/cli').main(argvForMocha);
